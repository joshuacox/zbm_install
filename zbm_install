#!/bin/sh
set -eu
. .env
source /etc/os-release
export ID
if   [ ${ID} = 'alpine' ]; then
  this_chroot_bin="chroot"
elif [ ${ID} = 'arch' ]; then
  this_chroot_bin="arch-chroot"
elif [ ${ID} = 'debian' ]; then
  this_chroot_bin="chroot"
fi

# echo out some of our vars 
# to ensure they are set now 
# before doing anything else
echo YOURHOSTNAME = ${YOURHOSTNAME}
echo BOOT_DISK = ${BOOT_DISK}
echo POOL_DISK = ${POOL_DISK}
echo BOOT_PART = ${BOOT_PART}
echo POOL_PART = ${POOL_PART}
echo BOOT_DEVICE = ${BOOT_DEVICE}
echo POOL_DEVICE = ${POOL_DEVICE}
echo ZHOSTID = ${ZHOSTID}

if [ $z_encrytion_enable = 'true' ]; then
  if [ -z ${SomeKeyphrase} ]; then
    echo "SomeKeyphrase not defined!"
    exit 1
  else
    mkdir -p /etc/zfs
    echo ${SomeKeyphrase} > /etc/zfs/zroot.key
    chmod 000 /etc/zfs/zroot.key
  fi
fi

unmounter () {
  set -eux
  cut -f2 -d" " /proc/mounts | grep ^/mnt | tac | while read i; do umount -l $i; done
  zpool export zroot
}


alpine_repo_prep () {
# breaking indent for cat EOF
cat <<EOF > /etc/apk/repositories
http://dl-cdn.alpinelinux.org/alpine/latest-stable/main/
https://dl-cdn.alpinelinux.org/alpine/latest-stable/main/
EOF
  setup-interfaces -ar
  apk update
  apk add zfs zfs-scripts sgdisk wipefs
  modprobe zfs
}

debian_repo_prep () {
# breaking indent for cat EOF
cat <<EOF > /etc/apt/sources.list
deb http://deb.debian.org/debian bookworm main non-free-firmware contrib
deb-src http://deb.debian.org/debian bookworm main non-free-firmware contrib
EOF
  apt update
  apt install -yq debootstrap gdisk dkms linux-headers-$(uname -r)
  apt install -yq zfsutils-linux
}

repo_check () {
  if   [ ${ID} = 'alpine' ]; then
    alpine_repo_prep
  elif [ ${ID} = 'arch' ]; then
    pacman -Sy
    curl -s https://raw.githubusercontent.com/eoli3n/archiso-zfs/master/init | bash
  elif [ ${ID} = 'debian' ]; then
    debian_repo_prep
  fi
}

blk_stuff () {
  zpool labelclear -f "${POOL_DISK}"

  wipefs -a "${POOL_DISK}"
  wipefs -a "${BOOT_DISK}"

  sgdisk --zap-all "${POOL_DISK}"
  sgdisk --zap-all "${BOOT_DISK}"

  sgdisk -n "${BOOT_PART}:1m:+512m" -t "${BOOT_PART}:ef00" "${BOOT_DISK}"
  sgdisk -n "${POOL_PART}:0:-10m" -t "${POOL_PART}:bf00" "${POOL_DISK}"

  mdev -s
}

zfs_create_pool () {
  if [ $z_encrytion_enable = 'true' ]; then
    KEY_LOCATION_OPT='-O keylocation=file:///etc/zfs/zroot.key'
    KEY_FORMAT_OPT='-O keyformat=passphrase'
  else
    KEY_LOCATION_OPT=' '
    KEY_FORMAT_OPT=' '
  fi
  zpool create -f -o ashift=12 \
    -O compression=zstd \
    -O acltype=posixacl \
    -O xattr=sa \
    -O relatime=on \
    -O encryption=aes-256-gcm \
    ${KEY_LOCATION_OPT} \
    ${KEY_FORMAT_OPT} \
    -o autotrim=on \
    -o compatibility=openzfs-2.1-linux \
    -m none zroot "${POOL_DEVICE}"
  zfs create -o mountpoint=none zroot/ROOT
  zfs create -o mountpoint=/home zroot/home
}

zfs_import () {
  zpool import -f -N -R /mnt zroot
  if [ $z_encrytion_enable = 'true' ]; then
    zfs load-key -L prompt zroot
  fi
}
zfs_export () {
  zpool export zroot
}

zfs_create_mounts () {
  zfs create -o mountpoint=/ -o canmount=noauto zroot/ROOT/${ID}
  zpool set bootfs=zroot/ROOT/${ID} zroot

  zfs_export
  zfs_import
  do_mounts
}

do_mounts () {
  zfs mount zroot/ROOT/${ID}
  zfs mount zroot/home
}

mkfs_and_mount_boot () {
  mkdir -p /mnt/boot/efi
  mkfs.vfat -F32 "${BOOT_DEVICE}"
  mount "${BOOT_DEVICE}" /mnt/boot/efi
}

copy_install_dirs () {
  zgenhostid -f ${ZHOSTID}
  cp /etc/hostid /mnt/etc
  cp /etc/resolv.conf /mnt/etc
  if   [ ${ID} = 'alpine' ]; then
    cp /etc/apk/repositories /mnt/etc/apk
    cp /etc/network/interfaces /mnt/etc/network
  elif [ ${ID} = 'debian' ]; then
# breaking indent for cat EOF
cat <<EOF > /mnt/etc/apt/sources.list
deb http://deb.debian.org/debian bookworm main non-free non-free-firmware contrib
deb-src http://deb.debian.org/debian bookworm main non-free non-free-firmware contrib
deb http://deb.debian.org/debian-security bookworm-security main non-free non-free-firmware contrib
deb-src http://deb.debian.org/debian-security/ bookworm-security main non-free non-free-firmware contrib
deb http://deb.debian.org/debian bookworm-updates main non-free non-free-firmware contrib
deb-src http://deb.debian.org/debian bookworm-updates main non-free non-free-firmware contrib
deb http://deb.debian.org/debian bookworm-backports main non-free non-free-firmware contrib
deb-src http://deb.debian.org/debian bookworm-backports main non-free non-free-firmware contrib
EOF
  fi
  mkdir -p /mnt/etc/zfs
  if [ $z_encrytion_enable = 'true' ]; then
    cp /etc/zfs/zroot.key /mnt/etc/zfs
  fi
# breaking indent for cat EOF
cat << EOF >> /mnt/etc/fstab
${BOOT_DEVICE} /boot/efi vfat defaults 0 0
EOF
}

install_os () {
  mount | grep mnt
  if   [ ${ID} = 'alpine' ]; then
    alpine_install
  elif [ ${ID} = 'arch' ]; then
    arch_install
  elif [ ${ID} = 'debian' ]; then
    debian_install
  fi
  copy_install_dirs
  echo "${YOURHOSTNAME}" > /mnt/etc/hostname
  echo -e "127.0.1.1\t${YOURHOSTNAME}" >> /mnt/etc/hosts
}

debian_install () {
  udevadm trigger
  debootstrap bookworm /mnt
}

arch_install () {
  pacstrap -K /mnt base linux linux-firmware vim networkmanager rsync git man-db man-pages texinfo
  genfstab -U /mnt >> /mnt/etc/fstab
}

alpine_install () {
  apk --arch x86_64 \
   -X http://dl-cdn.alpinelinux.org/alpine/latest-stable/main \
   -U --allow-untrusted \
   --root /mnt \
   --initdb add alpine-base
}

debian_prep_chroot () {
  mount -t proc proc /mnt/proc
  mount -t sysfs sys /mnt/sys
  mount -B /dev /mnt/dev
  mount -t devpts pts /mnt/dev/pts
  #chroot /mnt /bin/bash
}

alpine_prep_chroot () {
  mount --rbind /dev /mnt/dev
  mount --rbind /sys /mnt/sys
  mount --rbind /proc /mnt/proc
  #chroot /mnt
}

prep_chroot () {
  mount | grep mnt
  if   [ ${ID} = 'alpine' ]; then
    alpine_prep_chroot
  elif [ ${ID} = 'arch' ]; then
    echo 'skipping as arch has arch-chroot'
  elif [ ${ID} = 'debian' ]; then
    debian_prep_chroot
  fi
}

mk_debian_finish () {

# breaking indent for cat EOF
cat <<EOF > /mnt/finish.sh
#!/bin/bash
passwd
apt-get update
apt install -yq locales keyboard-configuration console-setup curl
dpkg-reconfigure locales tzdata keyboard-configuration console-setup
apt install -yq linux-headers-amd64 linux-image-amd64 zfs-initramfs dosfstools
echo "REMAKE_INITRD=yes" > /etc/dkms/zfs.conf
systemctl enable zfs.target
systemctl enable zfs-import-cache
systemctl enable zfs-mount
systemctl enable zfs-import.target
echo "UMASK=0077" > /etc/initramfs-tools/conf.d/umask.conf
update-initramfs -c -k all
zfs set org.zfsbootmenu:commandline="quiet" zroot/ROOT
zfs set org.zfsbootmenu:keysource="zroot/ROOT/${ID}" zroot
EOF
}
mk_arch_finish () {
cp /etc/pacman.conf /mnt/etc/pacman.conf
tee -a /mnt/etc/pacman.d/mirrorlist-archzfs <<- 'EOF'
## See https://github.com/archzfs/archzfs/wiki
## France
#,Server = https://archzfs.com/$repo/$arch

## Germany
#,Server = https://mirror.sum7.eu/archlinux/archzfs/$repo/$arch
#,Server = https://mirror.biocrafting.net/archlinux/archzfs/$repo/$arch

## India
#,Server = https://mirror.in.themindsmaze.com/archzfs/$repo/$arch

## United States
#,Server = https://zxcvfdsa.com/archzfs/$repo/$arch
EOF

tee -a /mnt/etc/pacman.conf <<- 'EOF'

#[archzfs-testing]
#Include = /etc/pacman.d/mirrorlist-archzfs

#,[archzfs]
#,Include = /etc/pacman.d/mirrorlist-archzfs
EOF
cat << EOF >> /mnt/finish.sh
#!/bin/sh
passwd
pacman-key --init
pacman-key --refresh-keys
pacman-key --populate
ln -sf /usr/share/zoneinfo/Region/City /etc/localtime
hwclock --systohc
printf 'en_US.UTF-8 UTF-8' >> /etc/locale.gen
locale-gen
printf 'LANG=en_US.UTF-8' >> /etc/locale.conf
touch /etc/vconsole.conf

curl --fail-early --fail -L https://archzfs.com/archzfs.gpg \
|  pacman-key -a - --gpgdir /etc/pacman.d/gnupg

pacman-key \
--lsign-key \
--gpgdir /etc/pacman.d/gnupg \
DDF7DB817396A49B2A2723F7403BD972F75D9D76

# this #, prefix is a workaround for ci/cd tests
# remove them
sed -i 's|#,||' /etc/pacman.d/mirrorlist-archzfs
sed -i 's|#,||' /etc/pacman.conf

# this one was wrecking my mirrorlist file, but the mirrorlist file is otherwise untouched commenting for now
# sed -i 's|^#||' /etc/pacman.d/mirrorlist

pacman -Syu --noconfirm
pacman -S --noconfirm mg mandoc efibootmgr mkinitcpio

kernel_compatible_with_zfs="$(pacman -Si zfs-linux \
| grep 'Depends On' \
| sed "s|.*linux=||" \
| awk '{ print $1 }')"
pacman -U --noconfirm https://america.archive.pkgbuild.com/packages/l/linux/linux-"${kernel_compatible_with_zfs}"-x86_64.pkg.tar.zst

pacman -S --noconfirm zfs-linux zfs-utils

systemctl enable zfs.target
systemctl enable zfs-import-cache
systemctl enable zfs-mount
systemctl enable zfs-import.target

mkinitcpio -P
zfs set org.zfsbootmenu:commandline="quiet" zroot/ROOT
EOF
cat <<EOF >> /mnt/finish.sh
zfs set org.zfsbootmenu:keysource="zroot/ROOT/${ID}" zroot
EOF
}
 
mk_alpine_finish () {
# breaking indent for cat EOF
if [ $z_encrytion_enable = 'true' ]; then
  echo "/etc/zfs/zroot.key" >> /mnt/etc/mkinitfs/features.d/zfshost.files
fi
if [ -f /mnt/finish.sh ]; then 
  echo "/mnt/finish.sh exists already"
  exit 1
else
cat <<EOF > /mnt/finish.sh
passwd
rc-update add hwdrivers sysinit
rc-update add networking
rc-update add hostname
apk add zfs zfs-lts curl efibootmgr
rc-update add zfs-import sysinit
rc-update add zfs-mount sysinit
echo "/etc/hostid" >> /etc/mkinitfs/features.d/zfshost.files
echo 'features="ata base keymap kms mmc scsi usb virtio nvme zfs zfshost"' > /etc/mkinitfs/mkinitfs.conf
mkinitfs -c /etc/mkinitfs/mkinitfs.conf "$(ls /mnt/lib/modules)"
zfs set org.zfsbootmenu:commandline="quiet" zroot/ROOT
EOF
fi
if [ $z_encrytion_enable = 'true' ]; then
cat <<EOF >> /mnt/finish.sh
zfs set org.zfsbootmenu:keysource="zroot/ROOT/${ID}" zroot
EOF
fi
}

efi_boot_mgr_setup () {
  mkdir -p /boot/efi/EFI/ZBM
  curl -o /boot/efi/EFI/ZBM/VMLINUZ.EFI -L https://get.zfsbootmenu.org/efi
  cp /boot/efi/EFI/ZBM/VMLINUZ.EFI /boot/efi/EFI/ZBM/VMLINUZ-BACKUP.EFI
  echo efibootmgr -c -d "${BOOT_DISK}" -p "${BOOT_PART}" \
    -L "ZFSBootMenu (Backup)" \
    -l '\EFI\ZBM\VMLINUZ-BACKUP.EFI'
  echo efibootmgr -c -d "${BOOT_DISK}" -p "${BOOT_PART}" \
    -L "ZFSBootMenu" \
    -l '\EFI\ZBM\VMLINUZ.EFI'
}

mk_chooser_finish () {
  mount | grep mnt
  if   [ ${ID} = 'alpine' ]; then
    mk_alpine_finish
    this_chroot_bin="chroot"
  elif [ ${ID} = 'arch' ]; then
    mk_arch_finish
    this_chroot_bin="arch-chroot"
  elif [ ${ID} = 'debian' ]; then
    mk_debian_finish
    this_chroot_bin="chroot"
  fi
  chmod +x /mnt/finish.sh
  echo "Now you need to run finish.sh in a chroot e.g. '$this_chroot_bin /mnt'"
  $this_chroot_bin /mnt
}

set -x

repo_check
# blk_stuff
# zfs_create_pool
# zfs_export
zfs_import
# zfs_create_mounts
do_mounts
# install_os
# prep_chroot
# mk_chooser_finish
# mkfs_and_mount_boot
# efi_boot_mgr_setup

# chroot /mnt
# unmounter
